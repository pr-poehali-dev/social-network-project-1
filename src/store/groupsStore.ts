interface Group {
  id: number;
  name: string;
  avatar: string;
  members: number;
  description: string;
  isJoined: boolean;
  category: string;
  x?: number;
  y?: number;
}

class GroupsStore {
  private groups: Group[] = [
    {
      id: 1,
      name: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
      avatar: 'üíª',
      members: 15234,
      description: '–°–æ–æ–±—â–µ—Å—Ç–≤–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      isJoined: true,
      category: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      x: 45,
      y: 42,
    },
    {
      id: 2,
      name: '–î–∏–∑–∞–π–Ω –∏ UX',
      avatar: 'üé®',
      members: 8921,
      description: '–í—Å—ë –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∑–∞–π–Ω–µ',
      isJoined: true,
      category: '–î–∏–∑–∞–π–Ω',
      x: 55,
      y: 38,
    },
    {
      id: 3,
      name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
      avatar: '‚úàÔ∏è',
      members: 23456,
      description: '–î–µ–ª–∏–º—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ–µ–∑–¥–∫–∞—Ö',
      isJoined: false,
      category: '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
      x: 72,
      y: 45,
    },
    {
      id: 4,
      name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
      avatar: 'üì∏',
      members: 12890,
      description: '–ò—Å–∫—É—Å—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
      isJoined: true,
      category: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
      x: 40,
      y: 28,
    },
    {
      id: 5,
      name: '–ö—É–ª–∏–Ω–∞—Ä–∏—è',
      avatar: 'üç≥',
      members: 19234,
      description: '–†–µ—Ü–µ–ø—Ç—ã –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã',
      isJoined: false,
      category: '–ï–¥–∞',
      x: 58,
      y: 40,
    },
  ];

  private listeners: Array<() => void> = [];

  getGroups(): Group[] {
    return [...this.groups];
  }

  addGroup(group: Omit<Group, 'id' | 'members' | 'isJoined'>): void {
    const newGroup: Group = {
      ...group,
      id: this.groups.length + 1,
      members: 1,
      isJoined: true,
      x: group.x || Math.random() * 80 + 10,
      y: group.y || Math.random() * 40 + 20,
    };
    this.groups = [newGroup, ...this.groups];
    this.notifyListeners();
  }

  toggleJoin(groupId: number): void {
    this.groups = this.groups.map((group) =>
      group.id === groupId ? { ...group, isJoined: !group.isJoined } : group
    );
    this.notifyListeners();
  }

  subscribe(listener: () => void): () => void {
    this.listeners.push(listener);
    return () => {
      this.listeners = this.listeners.filter((l) => l !== listener);
    };
  }

  private notifyListeners(): void {
    this.listeners.forEach((listener) => listener());
  }
}

export const groupsStore = new GroupsStore();
export type { Group };
